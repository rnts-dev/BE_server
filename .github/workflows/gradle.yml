name: CI/CD Pipeline

on:
  push:
    branches:
      - feature/YFTD-10

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        working-directory: backend-api
        run: chmod +x gradlew

      - name: Build with Gradle
        working-directory: backend-api
        run: ./gradlew build

      - name: Copy keystore to the build context
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > backend-api/src/main/resources/keystore.p12
          chmod 600 backend-api/src/main/resources/keystore.p12

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}


      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: backend-api
          file: backend-api/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/rnts2:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      - name: Decode SSH key
        id: decode-key
        run: |
          echo "${{ secrets.NCP_SERVER_KEY }}" | base64 --decode > /tmp/your-key.pem
          chmod 600 /tmp/your-key.pem

      - name: Deploy to SERVER
        env:
          USER: ${{ secrets.NCP_SERVER_USER }}
          HOST: ${{ secrets.NCP_SERVER_HOST }}
        run: |          
          ssh -o StrictHostKeyChecking=no -i /tmp/your-key.pem $USER@$HOST << 'EOF'
            # Ensure Docker is running
            sudo service docker start

            # Verify the keystore file is present
            ls -l /app/keystore.p12

            # Set permissions for the keystore file
            sudo chmod 644 /app/keystore.p12        

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # Find and kill process using port 8443 (if any)
            PID=$(sudo lsof -t -i:8443) && [ ! -z "$PID" ] && sudo kill -9 $PID || echo "No process found using port 8443"

            # Remove old containers
            echo "Removing old containers..."
            sudo docker ps -a -q --filter "name=rnts-app2" | xargs -r sudo docker stop || true
            sudo docker ps -a -q --filter "name=rnts-app2" | xargs -r sudo docker rm || true

            # Remove old images
            echo "Removing old images..."
            sudo docker images -q --filter "dangling=true" | xargs -r sudo docker rmi || true
            sudo docker images -q --filter "label=project=rnts2" | xargs -r sudo docker rmi || true

            # Pull the latest image
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/rnts2:latest

            # Move the keystore file to the appropriate location
            sudo cp /app/keystore.p12 /app/keystore.p12

            # Update docker-compose.yml with the latest version
            # Change the image name in the docker-compose file
            sed -i "s|image:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/rnts2:latest|g" /path/to/your/project/docker-compose.yml

            # Stop the currently running containers
            docker-compose down

            # Start the new containers
            docker-compose up --build --force-recreate -d
          EOF


